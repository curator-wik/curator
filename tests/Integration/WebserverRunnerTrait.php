<?php


namespace Curator\Tests\Integration;

/**
 * Trait WebserverRunnerTrait
 * Starts and stops a webserver on localhost for testing of downloading things.
 */
trait WebserverRunnerTrait {
  /**
   * @var resource $h_server_proc
   *
   */
  protected static $h_server_proc;

  /**
   * Puts anything the tests need in the web root, aka /tmp.
   *
   * @return void
   */
  protected static function installDownloadData() { }

  /**
   * Returns a string representing the portion of a URL below the docroot
   * where a file is expected to be found. This is used to poll the server and
   * wait for it to be up before running the actual tests.
   *
   * @return string
   */
  protected static function getSampleFilePath() { return ''; }

  // Start a development webserver on :8080.
  public static function setUpBeforeClass() {
    parent::setUpBeforeClass();

    self::installDownloadData();

    $devnull = fopen('/dev/null', 'r+');
    $foo = [];

    $h_server_proc = proc_open(
      sprintf('exec /usr/bin/env php -S localhost:8080 -d error_log=/tmp/php.log -t %s', static::getPhpServerDocroot()),
      [0 => $devnull, 1 => $devnull, 2 => $devnull],
      $foo
    );
    self::$h_server_proc = $h_server_proc;

    // Wait for the development server to start listening.
    $attempts = 0;
    $url = getenv('TEST_HTTP_SERVER') . static::getSampleFilePath();
    while ($attempts < 10000) {
      usleep(1000);
      if (@file_get_contents($url)) {
        break;
      }
      $attempts++;
    }
  }

  // Stop the development webserver.
  public static function tearDownAfterClass() {
    parent::tearDownAfterClass(); // TODO: Change the autogenerated stub

    proc_terminate(self::$h_server_proc, SIGTERM);
    proc_close(self::$h_server_proc);
    self::$h_server_proc = FALSE;
  }

  protected static function getPhpServerDocroot() {
    return '/tmp';
  }
}